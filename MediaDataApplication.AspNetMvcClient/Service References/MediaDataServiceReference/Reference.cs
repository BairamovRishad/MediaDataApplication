//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaDataApplication.AspNetMvcClient.MediaDataServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
        "acts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaFault))]
    public partial class CommonFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaultMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaultMessage {
            get {
                return this.FaultMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultMessageField, value) != true)) {
                    this.FaultMessageField = value;
                    this.RaisePropertyChanged("FaultMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
        "acts")]
    [System.SerializableAttribute()]
    public partial class UserFault : MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.CommonFault {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
        "acts")]
    [System.SerializableAttribute()]
    public partial class MediaFault : MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.CommonFault {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaMetadata", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
        "acts")]
    [System.SerializableAttribute()]
    public partial class MediaMetadata : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long FileLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MediaIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileLength {
            get {
                return this.FileLengthField;
            }
            set {
                if ((this.FileLengthField.Equals(value) != true)) {
                    this.FileLengthField = value;
                    this.RaisePropertyChanged("FileLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MediaId {
            get {
                return this.MediaIdField;
            }
            set {
                if ((this.MediaIdField.Equals(value) != true)) {
                    this.MediaIdField = value;
                    this.RaisePropertyChanged("MediaId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
        "acts")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MediaDataServiceReference.IMediaDataService")]
    public interface IMediaDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/DeleteMedia", ReplyAction="http://tempuri.org/IMediaService/DeleteMediaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaFault), Action="http://tempuri.org/IMediaService/DeleteMediaMediaFaultFault", Name="MediaFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault), Action="http://tempuri.org/IMediaService/DeleteMediaUserFaultFault", Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        void DeleteMedia(string userName, string[] mediaFilesName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/DeleteMedia", ReplyAction="http://tempuri.org/IMediaService/DeleteMediaResponse")]
        System.Threading.Tasks.Task DeleteMediaAsync(string userName, string[] mediaFilesName);
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadChunkRequest) of message DownloadChunkRequest does not match the default value (DownloadMedia)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/DownloadMedia", ReplyAction="http://tempuri.org/IMediaService/DownloadMediaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault), Action="http://tempuri.org/IMediaService/DownloadMediaUserFaultFault", Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaFault), Action="http://tempuri.org/IMediaService/DownloadMediaMediaFaultFault", Name="MediaFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo DownloadMedia(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/DownloadMedia", ReplyAction="http://tempuri.org/IMediaService/DownloadMediaResponse")]
        System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo> DownloadMediaAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadChunkRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (DownloadMediaThumbnail)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/DownloadMediaThumbnail", ReplyAction="http://tempuri.org/IMediaService/DownloadMediaThumbnailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaFault), Action="http://tempuri.org/IMediaService/DownloadMediaThumbnailMediaFaultFault", Name="MediaFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault), Action="http://tempuri.org/IMediaService/DownloadMediaThumbnailUserFaultFault", Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo DownloadMediaThumbnail(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/DownloadMediaThumbnail", ReplyAction="http://tempuri.org/IMediaService/DownloadMediaThumbnailResponse")]
        System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo> DownloadMediaThumbnailAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/GetAllUserMediaFilesName", ReplyAction="http://tempuri.org/IMediaService/GetAllUserMediaFilesNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaFault), Action="http://tempuri.org/IMediaService/GetAllUserMediaFilesNameMediaFaultFault", Name="MediaFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault), Action="http://tempuri.org/IMediaService/GetAllUserMediaFilesNameUserFaultFault", Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        string[] GetAllUserMediaFilesName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/GetAllUserMediaFilesName", ReplyAction="http://tempuri.org/IMediaService/GetAllUserMediaFilesNameResponse")]
        System.Threading.Tasks.Task<string[]> GetAllUserMediaFilesNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/GetAllUserMediaMetadata", ReplyAction="http://tempuri.org/IMediaService/GetAllUserMediaMetadataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault), Action="http://tempuri.org/IMediaService/GetAllUserMediaMetadataUserFaultFault", Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaFault), Action="http://tempuri.org/IMediaService/GetAllUserMediaMetadataMediaFaultFault", Name="MediaFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata[] GetAllUserMediaMetadata(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/GetAllUserMediaMetadata", ReplyAction="http://tempuri.org/IMediaService/GetAllUserMediaMetadataResponse")]
        System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata[]> GetAllUserMediaMetadataAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/GetMediaMetadata", ReplyAction="http://tempuri.org/IMediaService/GetMediaMetadataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault), Action="http://tempuri.org/IMediaService/GetMediaMetadataUserFaultFault", Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaFault), Action="http://tempuri.org/IMediaService/GetMediaMetadataMediaFaultFault", Name="MediaFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata GetMediaMetadata(string userName, string mediaFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/GetMediaMetadata", ReplyAction="http://tempuri.org/IMediaService/GetMediaMetadataResponse")]
        System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata> GetMediaMetadataAsync(string userName, string mediaFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/UpdateMediaMetadata", ReplyAction="http://tempuri.org/IMediaService/UpdateMediaMetadataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault), Action="http://tempuri.org/IMediaService/UpdateMediaMetadataUserFaultFault", Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaFault), Action="http://tempuri.org/IMediaService/UpdateMediaMetadataMediaFaultFault", Name="MediaFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        void UpdateMediaMetadata(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata mediaMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/UpdateMediaMetadata", ReplyAction="http://tempuri.org/IMediaService/UpdateMediaMetadataResponse")]
        System.Threading.Tasks.Task UpdateMediaMetadataAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata mediaMetadata);
        
        // CODEGEN: Generating message contract since the operation UploadMedia is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/UploadMedia", ReplyAction="http://tempuri.org/IMediaService/UploadMediaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaFault), Action="http://tempuri.org/IMediaService/UploadMediaMediaFaultFault", Name="MediaFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault), Action="http://tempuri.org/IMediaService/UploadMediaUserFaultFault", Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaResponse UploadMedia(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/UploadMedia", ReplyAction="http://tempuri.org/IMediaService/UploadMediaResponse")]
        System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaResponse> UploadMediaAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaFileInfo request);
        
        // CODEGEN: Generating message contract since the operation UploadMediaThumbnail is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/UploadMediaThumbnail", ReplyAction="http://tempuri.org/IMediaService/UploadMediaThumbnailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault), Action="http://tempuri.org/IMediaService/UploadMediaThumbnailUserFaultFault", Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaFault), Action="http://tempuri.org/IMediaService/UploadMediaThumbnailMediaFaultFault", Name="MediaFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaThumbnailResponse UploadMediaThumbnail(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadThumbFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/UploadMediaThumbnail", ReplyAction="http://tempuri.org/IMediaService/UploadMediaThumbnailResponse")]
        System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaThumbnailResponse> UploadMediaThumbnailAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadThumbFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LoginUser", ReplyAction="http://tempuri.org/IUserService/LoginUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault), Action="http://tempuri.org/IUserService/LoginUserUserFaultFault", Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        void LoginUser(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LoginUser", ReplyAction="http://tempuri.org/IUserService/LoginUserResponse")]
        System.Threading.Tasks.Task LoginUserAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RegisterUser", ReplyAction="http://tempuri.org/IUserService/RegisterUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UserFault), Action="http://tempuri.org/IUserService/RegisterUserUserFaultFault", Name="UserFault", Namespace="http://schemas.datacontract.org/2004/07/MediaDataApplication.WcfService.DataContr" +
            "acts")]
        void RegisterUser(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RegisterUser", ReplyAction="http://tempuri.org/IUserService/RegisterUserResponse")]
        System.Threading.Tasks.Task RegisterUserAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.User user);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadChunkRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadChunkRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public long Offset;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string UserName;
        
        public DownloadChunkRequest() {
        }
        
        public DownloadChunkRequest(string FileName, int Length, long Offset, string UserName) {
            this.FileName = FileName;
            this.Length = Length;
            this.Offset = Offset;
            this.UserName = UserName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public DownloadFileInfo() {
        }
        
        public DownloadFileInfo(string FileName, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string UserName;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string FileName, string UserName) {
            this.FileName = FileName;
            this.UserName = UserName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadMediaFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadMediaFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string UserName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public UploadMediaFileInfo() {
        }
        
        public UploadMediaFileInfo(string FileName, string UserName, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.UserName = UserName;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadMediaResponse {
        
        public UploadMediaResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadThumbFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadThumbFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string MediaFileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string UserName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public UploadThumbFileInfo() {
        }
        
        public UploadThumbFileInfo(string FileName, string MediaFileName, string UserName, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.MediaFileName = MediaFileName;
            this.UserName = UserName;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadMediaThumbnailResponse {
        
        public UploadMediaThumbnailResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMediaDataServiceChannel : MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MediaDataServiceClient : System.ServiceModel.ClientBase<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService>, MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService {
        
        public MediaDataServiceClient() {
        }
        
        public MediaDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MediaDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediaDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediaDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DeleteMedia(string userName, string[] mediaFilesName) {
            base.Channel.DeleteMedia(userName, mediaFilesName);
        }
        
        public System.Threading.Tasks.Task DeleteMediaAsync(string userName, string[] mediaFilesName) {
            return base.Channel.DeleteMediaAsync(userName, mediaFilesName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService.DownloadMedia(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadChunkRequest request) {
            return base.Channel.DownloadMedia(request);
        }
        
        public System.IO.Stream DownloadMedia(ref string FileName, int Length, long Offset, string UserName) {
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadChunkRequest inValue = new MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadChunkRequest();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.Offset = Offset;
            inValue.UserName = UserName;
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo retVal = ((MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService)(this)).DownloadMedia(inValue);
            FileName = retVal.FileName;
            return retVal.FileByteStream;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo> MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService.DownloadMediaAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadChunkRequest request) {
            return base.Channel.DownloadMediaAsync(request);
        }
        
        public System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo> DownloadMediaAsync(string FileName, int Length, long Offset, string UserName) {
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadChunkRequest inValue = new MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadChunkRequest();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.Offset = Offset;
            inValue.UserName = UserName;
            return ((MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService)(this)).DownloadMediaAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService.DownloadMediaThumbnail(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadRequest request) {
            return base.Channel.DownloadMediaThumbnail(request);
        }
        
        public System.IO.Stream DownloadMediaThumbnail(ref string FileName, string UserName) {
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadRequest inValue = new MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadRequest();
            inValue.FileName = FileName;
            inValue.UserName = UserName;
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo retVal = ((MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService)(this)).DownloadMediaThumbnail(inValue);
            FileName = retVal.FileName;
            return retVal.FileByteStream;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo> MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService.DownloadMediaThumbnailAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadRequest request) {
            return base.Channel.DownloadMediaThumbnailAsync(request);
        }
        
        public System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadFileInfo> DownloadMediaThumbnailAsync(string FileName, string UserName) {
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadRequest inValue = new MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.DownloadRequest();
            inValue.FileName = FileName;
            inValue.UserName = UserName;
            return ((MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService)(this)).DownloadMediaThumbnailAsync(inValue);
        }
        
        public string[] GetAllUserMediaFilesName(string userName) {
            return base.Channel.GetAllUserMediaFilesName(userName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllUserMediaFilesNameAsync(string userName) {
            return base.Channel.GetAllUserMediaFilesNameAsync(userName);
        }
        
        public MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata[] GetAllUserMediaMetadata(string userName) {
            return base.Channel.GetAllUserMediaMetadata(userName);
        }
        
        public System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata[]> GetAllUserMediaMetadataAsync(string userName) {
            return base.Channel.GetAllUserMediaMetadataAsync(userName);
        }
        
        public MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata GetMediaMetadata(string userName, string mediaFileName) {
            return base.Channel.GetMediaMetadata(userName, mediaFileName);
        }
        
        public System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata> GetMediaMetadataAsync(string userName, string mediaFileName) {
            return base.Channel.GetMediaMetadataAsync(userName, mediaFileName);
        }
        
        public void UpdateMediaMetadata(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata mediaMetadata) {
            base.Channel.UpdateMediaMetadata(mediaMetadata);
        }
        
        public System.Threading.Tasks.Task UpdateMediaMetadataAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.MediaMetadata mediaMetadata) {
            return base.Channel.UpdateMediaMetadataAsync(mediaMetadata);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaResponse MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService.UploadMedia(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaFileInfo request) {
            return base.Channel.UploadMedia(request);
        }
        
        public void UploadMedia(string FileName, string UserName, System.IO.Stream FileByteStream) {
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaFileInfo inValue = new MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaFileInfo();
            inValue.FileName = FileName;
            inValue.UserName = UserName;
            inValue.FileByteStream = FileByteStream;
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaResponse retVal = ((MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService)(this)).UploadMedia(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaResponse> MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService.UploadMediaAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaFileInfo request) {
            return base.Channel.UploadMediaAsync(request);
        }
        
        public System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaResponse> UploadMediaAsync(string FileName, string UserName, System.IO.Stream FileByteStream) {
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaFileInfo inValue = new MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaFileInfo();
            inValue.FileName = FileName;
            inValue.UserName = UserName;
            inValue.FileByteStream = FileByteStream;
            return ((MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService)(this)).UploadMediaAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaThumbnailResponse MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService.UploadMediaThumbnail(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadThumbFileInfo request) {
            return base.Channel.UploadMediaThumbnail(request);
        }
        
        public void UploadMediaThumbnail(string FileName, string MediaFileName, string UserName, System.IO.Stream FileByteStream) {
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadThumbFileInfo inValue = new MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadThumbFileInfo();
            inValue.FileName = FileName;
            inValue.MediaFileName = MediaFileName;
            inValue.UserName = UserName;
            inValue.FileByteStream = FileByteStream;
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaThumbnailResponse retVal = ((MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService)(this)).UploadMediaThumbnail(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaThumbnailResponse> MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService.UploadMediaThumbnailAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadThumbFileInfo request) {
            return base.Channel.UploadMediaThumbnailAsync(request);
        }
        
        public System.Threading.Tasks.Task<MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadMediaThumbnailResponse> UploadMediaThumbnailAsync(string FileName, string MediaFileName, string UserName, System.IO.Stream FileByteStream) {
            MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadThumbFileInfo inValue = new MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.UploadThumbFileInfo();
            inValue.FileName = FileName;
            inValue.MediaFileName = MediaFileName;
            inValue.UserName = UserName;
            inValue.FileByteStream = FileByteStream;
            return ((MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.IMediaDataService)(this)).UploadMediaThumbnailAsync(inValue);
        }
        
        public void LoginUser(string userName, string password) {
            base.Channel.LoginUser(userName, password);
        }
        
        public System.Threading.Tasks.Task LoginUserAsync(string userName, string password) {
            return base.Channel.LoginUserAsync(userName, password);
        }
        
        public void RegisterUser(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.User user) {
            base.Channel.RegisterUser(user);
        }
        
        public System.Threading.Tasks.Task RegisterUserAsync(MediaDataApplication.AspNetMvcClient.MediaDataServiceReference.User user) {
            return base.Channel.RegisterUserAsync(user);
        }
    }
}
